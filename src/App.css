/* src/App.css */

/* 1) Reset margins/padding and set box‐sizing */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
html, body {
  height: 100%;
  width: 100%;
  overflow: hidden; /* no page‐scroll—sidebar and viewer handle their own scrolling */
  font-family: Arial, sans-serif;
}

/* 2) Left sidebar: fixed 300px wide, full viewport height */
.controls {
  position: fixed;
  top: 0;
  left: 0;
  width: 300px;
  height: 100vh;               /* fill the viewport vertically */
  overflow-y: auto;            /* if controls exceed height, scroll them */
  background-color: #f5f5f5;   /* light gray so it’s always visible */
  border-right: 1px solid #ccc;
  padding: 12px;
  z-index: 1000;               /* above everything else */
}

/* 3) Each control row, stacked vertically */
.controlRow {
  margin-bottom: 16px;
}
.controlRow label {
  font-weight: bold;
  display: block;
  margin-bottom: 6px;
}
.controlRow input,
.controlRow select,
.controlRow button {
  font-size: 1em;
  padding: 4px 6px;
}

/* 4) No “display:none” here—React’s JS will add/remove #sphereControls and #customSelectionRow */

/* 5) Right‐hand viewer: absolutely positioned to the right of the 300px sidebar */
#viewer {
  position: absolute;
  top: 0;
  left: 300px;     /* starts immediately after the 300px sidebar */
  width: 700px;
  height: 550px;
  margin: 20px;    /* some breathing room from the top/left of its area */
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: white;
  z-index: 500;    /* behind the sidebar */
}

/* 6) If the browser viewport is narrower than viewer size, allow #viewer to scroll */
.viewerContainer {
  position: absolute;
  top: 0;
  left: 300px;
  right: 0;
  bottom: 0;
  overflow: auto;
}

/* 7) Center the actual canvas inside #viewer */
#viewer canvas {
  display: block;
  margin: 0 auto;
}
